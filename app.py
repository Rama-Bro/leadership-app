import streamlit as st
import pandas as pd

# -------------------------------
# 리더십 영역 및 문항 설정
# -------------------------------
areas = {
    "자기 인식": [
        "나는 내 감정 변화를 인식하고 조절하려 노력한다.",
        "내 행동이 타인에게 미치는 영향을 고려한다.",
        "나는 나의 강점과 약점을 비교적 잘 알고 있다.",
        "타인의 피드백을 수용적으로 받아들이는 편이다."
    ],
    "관계 리더십": [
        "나는 팀원들의 감정 변화를 민감하게 인식한다.",
        "구성원들과의 신뢰를 쌓기 위해 노력한다.",
        "갈등 상황에서 중재하려는 태도를 보인다.",
        "상대방을 배려하며 피드백을 전달한다."
    ],
    "변화 대응력": [
        "예상치 못한 변화에도 유연하게 대처할 수 있다.",
        "계획이 틀어졌을 때도 침착하게 대응한다.",
        "위기 상황에서도 금방 회복하여 집중할 수 있다.",
        "팀에 변화가 필요할 때 방향을 제시하려 한다."
    ],
    "전략적 사고": [
        "문제의 핵심을 빠르게 파악하는 편이다.",
        "장기적 관점에서 전략을 고민한다.",
        "복잡한 상황을 구조화해서 바라본다.",
        "다양한 정보와 관점을 통합해 판단한다."
    ],
    "실행력": [
        "목표를 행동 계획으로 구체화할 수 있다.",
        "업무를 끝까지 책임지고 마무리하는 편이다.",
        "문제가 생기면 적극적으로 해결하려 한다.",
        "우선순위를 정해 체계적으로 실행한다."
    ],
    "영향력": [
        "나의 의견을 논리적으로 전달한다.",
        "구성원을 설득할 수 있는 능력이 있다.",
        "필요시 권한을 위임할 수 있다.",
        "상황에 맞게 커뮤니케이션 방식을 조절한다."
    ],
    "팀 운영 및 육성": [
        "구성원의 특성과 역량에 따라 역할을 분배한다.",
        "팀원의 성장을 위해 코칭을 제공한다.",
        "성과를 공정하게 평가하고 피드백한다.",
        "팀워크를 조성하는 데 기여한다."
    ]
}

score_ranges = {
    "우수": (4.0, 5.0),
    "보통": (2.6, 3.9),
    "취약": (1.0, 2.5)
}

comments = {
    "우수": "이 영역의 역량이 뛰어나며, 리더로서 강점으로 작용할 수 있습니다.",
    "보통": "이 역량은 일정 수준 발휘되며, 일부 상황에서는 보완이 필요할 수 있습니다.",
    "취약": "이 영역은 리더십 발휘에 어려움이 있을 수 있으며, 개발이 필요합니다."
}

# -------------------------------
# 앱 시작
# -------------------------------
st.title("리더십 자가진단 테스트")
user_code = st.text_input("본인의 고유 코드를 입력하세요 (예: UQ7A3)")

if user_code:
    st.markdown("---")
    st.header("문항 응답")
    responses = {}
    for area, questions in areas.items():
        st.subheader(f"🧭 {area}")
        for q in questions:
            responses[q] = st.slider(q, 1, 5, 3)

    if st.button("제출하고 결과 보기"):
        st.markdown("---")
        st.header("📊 진단 결과 요약")
        area_scores = {}
        for area, questions in areas.items():
            scores = [responses[q] for q in questions]
            avg = round(sum(scores) / len(scores), 2)
            area_scores[area] = avg
            level = next(k for k, (low, high) in score_ranges.items() if low <= avg <= high)
            st.subheader(f"{area} : {avg}점 ({level})")
            st.write(f"📝 {comments[level]}")

        st.success("결과가 성공적으로 제출되었습니다.")
